---
title: The JSKOS data format for Knowledge Graphs
author:
  - name: Jakob Voß
    affiliations:
      - name: Verbundzentrale des GBV (VZG)
        address: Platz der Göttinger Sieben 1
        city: Göttingen
        country: Germany
        postal-code: 37073
    orcid: 0000-0002-7613-4123
    email: jakob.voss@gbv.de
abstract: |
  This is going to become an abstract.
keywords:
 - knowledge graphs
 - data integration
 - NFDI
reference-section-title: References
bibliography: references.bib
---

# Introduction

The JSKOS format (JSON for Knowledge Organization Systems) was created 2014 in preparation of project coli-conc [@Diedrichs2015] to provide a JSON format for knowledge organization systems (KOS) and semantic artifacts, such as classifications, thesauri, authority files, and knowledge graphs. The data model is based on SKOS [@Miles2009] extended by entities for mappings and elements from other ontologies. JSKOS has since become a core part of terminology infrastructure at VZG library service center and it is being applied in the National Research Data Infrastructure of Germany (NFDI), in particular the [knowledge graph of NFDI4Objects](https://graph.nfdi4objects.net/) and the NFDI Terminology Services (TS4NFDI) [@Baum2024].

# History and applications

Project coli-conc started in 2014 to build an infrastructure for computer-assisted creation and management of mappings (also known as crosswalks) between KOS [@Diedrichs2015]. This required a JSON format for KOS and its elements (concepts, classes, entities...) and for individual mappings. The Simple Knowledge Organization System (SKOS) [@Miles2009] was used as core ontology, mapped to JSON, and extended with missing properties and classes. Another important input was the data model of the terminology registry BARTOC [@Ledl2016; @Voss2016] and the Networked Knowledge Organization Systems Dublin Core Application Profile (NKOS AP) [@Zeng2015]. To simplify its use in web applications, the resulting JSKOS format was not defined as RDF ontology but as JSON format with mapping to RDF based on JSON-LD.

Specification and features of JSKOS have since been extended based on requests from practice. The main applications and libraries using JSKOS are

- [Cocoda](https://coli-conc.gbv.de/cocoda/), a web application to view, create, evaluate, and modify mappings
- [BARTOC](https://bartoc.org), a registry of KOS (migrated from University Library Basel to VZG in 2020)
- [JSKOS Server](https://github.com/gbv/jskos-server), a database management system to store (read and write) JSKOS data with authentification
- [cocoda-sdk](https://github.com/gbv/cocoda-sdk), a programming library to access KOS from diverse sources and formats and map them to JSKOS

This infrastructure is currently being extended to support mapping more KOS formats from and to JSKOS for integration of terminology registries in NFDI.

# Features

Repeatable fields are always arrays and language-tagged strings are objects with language tags as keys. 

- SKOS Concept and Concept Scheme with their common properties from SKOS specification
- Arbitrary resources
- KOS features beyond SKOS, in particular mappings, and concept bundles (for combination of concepts, also for facetted classifications)
- Addition fields commonly found in KOS
- Special fields for management of resources (created vs startDate)
- Ranks and qualified statements similar to Wikibase data model

The JSON structure described by the specification and can be checked by a JSON Schema [@] and a reference implementation [jskos-validate].

A principal guideline in creation of JSKOS was to always look out for existing solutions. Instead of defining data elements for all types of content, some aspects are delegated to existing standards (@tab-standards). This is similar to RDF ontologies that often incorporate classes and properties from other ontologies, but JSKOS was not restricted to choose from RDF ontologies.

| Content | Standard
|---------|----------
| Annotations (z.B. for reviewing concepts) | Web Annotation Data Model
| Media files (audiovisual content) | IIIF
| Geographical data | GeoJSON
| Temporal data | XML Schema and ISO 8601-2 (EDTF)

: Topics and standards {#tab-standards}

Further: Data Catalog Vocabulary (DCAT)

<!--
A stable 1.0.0 release is planned within the next two years.

- JSON-Serialization of SKOS
- Extended by entities for mappings

JSKOS is JSON-LD [@Kellogg2020]

A common misconception of JSON-LD: it is not meant to create a JSON format but to 

For this reasons it JSON Schema

-->
<!-- Knowledge graphs: different graph data models (RDF and property graphs) -->

<!--
## Image: SKOS compared to RDF 

- Lexical "Apple"
- Apple as SKOS Concept (the fruit, not the company)
- Apple as RDF resource (a class or instance, depending on use case)

In SKOS there is no TBox and ABox, it's just concepts.

Entities can have additional types but similar to labels in labeled property graphs, these types carry no 
-->

::: {#lst-example}
~~~json
{ 
  "prefLabel": { "en": "apple" }, 
  "altLabel": { "en": [ ... ] }
}
~~~

Example of a JSKOS record
:::

# Related work

JSKOS has been designed after a review of existing software for knowledge organization systems an the data formats used therein.and APIs

Wikibase data model

First of all JSKOS is based on SKOS and JSKOS-LD although. 

JSON-LD was not introduced into JSKOS before ... and it is still not mandatory part of the specification.

- Return format of APIs for terminology registries (Skosmos etc.)

JSKOS is has been influenced by SKOS, JSON-LD 

Moreover there is X-SKOS, SSSOM and formats for property graphs such as PG Format.

TODO: image with

- Property Graphs
- RDF
- RDF-star
- Wikibase
- JSKOS

## JSKOS and RDF + Role of JSKOS for knowledge graphs

As a matter of fact, data in most end-use applications is not processed in form of RDF statements but in data structures of a programming language. JSON is close to the type system of JavaScript and other scripting languages, so ...

no or only light mapping to the type system 

(spreadsheets as notable execption)

SKOS abstracts from features of different kinds of KOS to a simplified form (e.g. types of hierarchical relations such as part-of, subclass-of... are simplified into one hierarchical property). JSKOS adds some more specific properties often found in different kinds of KOS but the 

The fields have less specific semantic than properties from specialized ontologies, but they have pragmatic value and they support integration of KOS in different forms from different sources.


NFDI4Objects KG

- N4O KG: terminologies in addition to ABox and TBox

A knowledge base can be conceptually represented as a combination of terminologies (TBox) and assertions (ABox).
identifiers (Ibox)

KOS are *referenced by other knowledge graphs*

<!-- **Acknowledgments** This work is supported by ... -->
